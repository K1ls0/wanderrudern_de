# Sample workflow for building and deploying a Hugo site to GitHub Pages
name: Deploy Hugo site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    if: "${{ github.ref == 'refs/heads/main' }}" # && (contains(github.event.head_commit.message, '[build]') || contains(github.event_name, 'workflow'))
    env:
      HUGO_VERSION: 0.136.5
    steps:
      #- uses: actions/checkout@v4
      - name: Install python3
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y python3
      - name: Install Hugo CLI
        run: |
          wget -O ${{ runner.temp }}/hugo.deb https://github.com/gohugoio/hugo/releases/download/v${HUGO_VERSION}/hugo_extended_${HUGO_VERSION}_linux-amd64.deb \
          && sudo dpkg -i ${{ runner.temp }}/hugo.deb
      - name: Install Dart Sass
        run: sudo snap install dart-sass
          #- name: Install pnpm
          #  run: "curl -fsSL https://get.pnpm.io/install.sh | sh - && source ~/.bashrc && pnpm --version"
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache build state
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            resources
            public
          key: buildstate

      - name: Cache hash file
        if: "${{ !contains(github.event.head_commit.message, '[full]') }}"
        uses: actions/cache@v4
        with:
          path: util_hashing/hashes.chk
          key: update_hashes

      - name: Create Hashfile
        run: "./util/create_file_hashes.py"

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Install Node.js dependencies
        run: "[[ -f package-lock.json || -f npm-shrinkwrap.json ]] && npm ci || true"
      - name: Build with Hugo
        env:
          # For maximum backward compatibility with Hugo modules
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo \
            --minify \
            --baseURL "${{ vars.PAGE_BASE_URL }}/"
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          name: site-output-artifact
          path: ./public

      #- name: Save cache
      #- uses: actions/cache/save@v4
      #  with:
      #    path: |
      #      node_modules
      #      resources
      #      public
      #    key: buildstate

  # Deployment job
#  deploy:
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: build
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v4

  deploy_sftp:
    environment:
      name: couchramen-it
    runs-on: ubuntu-latest
    needs: build
    env:
      BASEURL: https://couchramen-it.de
    steps:
      - name: Install known-key for ssh.strato.de
        env:
          REMOTE_PUBLIC_KEY: ${{ secrets.REMOTE_PUBLIC_KEY }}
        run: |
          mkdir -p ~/.ssh
          printf "ssh.strato.de ssh-ed25519 %s\n" "$REMOTE_PUBLIC_KEY" >> ~/.ssh/known_hosts

      - name: Install lftp and python3
        run: |
          sudo apt-get update -qy
          sudo apt-get install -y lftp python3

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Create working directory
        run: "mkdir -p ./util_hashing"

      - name: Cache hash file
        if: "${{ ! contains(github.event.head_commit.message, '[full]') }}"
        uses: actions/cache@v4
        with:
          path: util_hashing/hashes.chk
          key: update_hashes

      #- name: Download hashes artifact
      #  uses: actions/download-artifact@v4
      #  with:
      #    name: hashes
      #    path: ./util_hashing/
          
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: site-output-artifact
          path: ./public

      - name: Extract artifact
        run: "cd ./public && tar -xf ./artifact.tar && rm artifact.tar"

      - name: Diff artifact files and create Sftp Batchfile
        run: "./util/diff_files.py"

      - name: Upload
        env:
          SFTP_USER: ${{ secrets.SFTP_USER }}
          SFTP_PASSWORD: ${{ secrets.SFTP_PASSWORD }}
        run: |
          lftp \
            -u "$SFTP_USER,$SFTP_PASSWORD" \
            -p 22 \
            sftp://ssh.strato.de \
            <./util_hashing/update.sftp

